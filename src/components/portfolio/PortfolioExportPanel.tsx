import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { Download } from 'lucide-react';
import { usePortfolioData } from '@/hooks/usePortfolioData';
import { fmtCurrency } from '@/lib/utils';
import PptxGenJS from 'pptxgenjs';

export const PortfolioExportPanel = () => {
  const [isExporting, setIsExporting] = useState(false);
  const { portfolioProjects, portfolioKPIs, getTopPerformer, getRiskOutliers } = usePortfolioData();
  const { toast } = useToast();

  const currentDate = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  const formatValue = (value: number | undefined | null) => {
    if (!value || !Number.isFinite(value)) return 'N/A';
    if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;
    if (value >= 1000) return `$${(value / 1000).toFixed(0)}K`;
    return fmtCurrency(value);
  };

  const handleExportPortfolio = async () => {
    if (portfolioProjects.length === 0) {
      toast({
        title: "No Data Available",
        description: "No data available for export. Run at least one scenario.",
        variant: "destructive"
      });
      return;
    }

    setIsExporting(true);
    try {
      const pptx = new PptxGenJS();
      pptx.layout = 'LAYOUT_WIDE';

      // Slide 1: Title Slide
      const titleSlide = pptx.addSlide();
      titleSlide.addText('Feasly Portfolio Summary', {
        x: 1, y: 2, w: 10, h: 1,
        fontSize: 36, bold: true, color: '1C4A36'
      });
      titleSlide.addText(currentDate, {
        x: 1, y: 3, w: 10, h: 0.5,
        fontSize: 18, color: '6b7280'
      });
      titleSlide.addText('Generated by Feasly SaaS', {
        x: 1, y: 3.5, w: 10, h: 0.5,
        fontSize: 14, color: '9ca3af'
      });

      // Slide 2: Portfolio Overview
      const overviewSlide = pptx.addSlide();
      overviewSlide.addText('Portfolio Overview', {
        x: 0.5, y: 0.5, w: 11, h: 0.8,
        fontSize: 28, bold: true, color: '1C4A36'
      });

      // KPI Grid
      const kpiData = [
        ['Total Projects', portfolioKPIs.totalProjects.toString()],
        ['Total Development Value', formatValue(portfolioKPIs.totalDevelopmentValue)],
        ['Average IRR', `${portfolioKPIs.avgIRR.toFixed(1)}%`],
        ['Average MOIC', `${portfolioKPIs.avgMOIC.toFixed(2)}x`]
      ];

      let yPos = 1.5;
      kpiData.forEach(([label, value]) => {
        overviewSlide.addText(label, {
          x: 1, y: yPos, w: 5, h: 0.4,
          fontSize: 16, bold: true
        });
        overviewSlide.addText(value, {
          x: 6, y: yPos, w: 4, h: 0.4,
          fontSize: 16, color: '1C4A36'
        });
        yPos += 0.6;
      });

      // Asset Type Mix
      if (portfolioKPIs.assetTypeMix.length > 0) {
        overviewSlide.addText('Asset Type Distribution', {
          x: 1, y: 4.5, w: 10, h: 0.5,
          fontSize: 18, bold: true
        });

        let assetYPos = 5.2;
        portfolioKPIs.assetTypeMix.forEach(asset => {
          overviewSlide.addText(`${asset.name}: ${asset.percentage.toFixed(1)}%`, {
            x: 1, y: assetYPos, w: 10, h: 0.3,
            fontSize: 14
          });
          assetYPos += 0.4;
        });
      }

      // Slide 3: Project Table
      const projectsSlide = pptx.addSlide();
      projectsSlide.addText('Project Portfolio', {
        x: 0.5, y: 0.5, w: 11, h: 0.8,
        fontSize: 28, bold: true, color: '1C4A36'
      });

      // Create table data - use PptxGenJS format
      const tableData: any[][] = [
        [
          { text: 'Project Name', options: { bold: true } },
          { text: 'Scenario', options: { bold: true } },
          { text: 'Location', options: { bold: true } },
          { text: 'Asset Type', options: { bold: true } },
          { text: 'Total Value', options: { bold: true } },
          { text: 'IRR (%)', options: { bold: true } }
        ]
      ];

      // Add up to 15 projects per slide
      const projectsToShow = portfolioProjects.slice(0, 15);
      projectsToShow.forEach(project => {
        tableData.push([
          { text: project.projectName || 'Unnamed Project' },
          { text: project.scenarioName || 'Baseline' },
          { text: project.location || 'N/A' },
          { text: project.assetType || 'Unspecified' },
          { text: formatValue(project.totalValue) },
          { text: project.irr ? `${project.irr.toFixed(1)}%` : 'N/A' }
        ]);
      });

      projectsSlide.addTable(tableData, {
        x: 0.5, y: 1.5, w: 11, h: 4,
        fontSize: 12,
        border: { pt: 1, color: 'E5E7EB' },
        fill: { color: 'F9FAFB' }
      });

      // Slide 4: Top Performer & Risk Outliers
      const insightsSlide = pptx.addSlide();
      insightsSlide.addText('Portfolio Insights', {
        x: 0.5, y: 0.5, w: 11, h: 0.8,
        fontSize: 28, bold: true, color: '1C4A36'
      });

      // Top Performer
      const topPerformer = getTopPerformer();
      if (topPerformer) {
        insightsSlide.addText('Top Performer', {
          x: 1, y: 1.5, w: 10, h: 0.5,
          fontSize: 18, bold: true
        });
        insightsSlide.addText(`• ${topPerformer.projectName} - ${topPerformer.irr?.toFixed(1)}% IRR - ${topPerformer.assetType}`, {
          x: 1.5, y: 2.2, w: 9, h: 0.4,
          fontSize: 14
        });
      }

      // Risk Outliers
      const riskOutliers = getRiskOutliers();
      if (riskOutliers.length > 0) {
        insightsSlide.addText('Risk Outliers (< 10% IRR)', {
          x: 1, y: 3, w: 10, h: 0.5,
          fontSize: 18, bold: true
        });

        let outlierYPos = 3.7;
        riskOutliers.slice(0, 5).forEach(project => {
          insightsSlide.addText(`• ${project.projectName} - ${project.irr?.toFixed(1)}% IRR - ${project.assetType} - ${project.approvalStatus}`, {
            x: 1.5, y: outlierYPos, w: 9, h: 0.4,
            fontSize: 14
          });
          outlierYPos += 0.4;
        });
      }

      // Slide 5: Footer / Signature Page
      const footerSlide = pptx.addSlide();
      footerSlide.addText('Portfolio Summary', {
        x: 1, y: 2, w: 10, h: 1,
        fontSize: 24, bold: true, color: '1C4A36'
      });

      footerSlide.addText(`Total projects evaluated: ${portfolioKPIs.totalProjects}`, {
        x: 1, y: 3, w: 10, h: 0.5,
        fontSize: 16
      });

      footerSlide.addText(`Generated on ${currentDate}`, {
        x: 1, y: 3.5, w: 10, h: 0.5,
        fontSize: 16
      });

      footerSlide.addText('Projected using Feasly SaaS', {
        x: 1, y: 4, w: 10, h: 0.5,
        fontSize: 16
      });

      footerSlide.addText('For internal use only', {
        x: 1, y: 4.5, w: 10, h: 0.5,
        fontSize: 14, color: '9ca3af', italic: true
      });

      // Save the presentation
      const fileName = `Feasly_Portfolio_Report_${new Date().toISOString().split('T')[0]}.pptx`;
      await pptx.writeFile({ fileName });

      toast({
        title: "Export Successful",
        description: "Portfolio data has been exported successfully",
      });

    } catch (error) {
      console.error('Error exporting portfolio:', error);
      toast({
        title: "Export Error", 
        description: "Portfolio export failed. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsExporting(false);
    }
  };

  const canExport = portfolioProjects.length > 0;

  return (
    <Button 
      variant="outline" 
      onClick={handleExportPortfolio}
      disabled={isExporting || !canExport}
      title={!canExport ? "No data available for export. Run at least one scenario." : undefined}
    >
      <Download className="h-4 w-4 mr-2" />
      {isExporting ? 'Exporting...' : 'Export to PowerPoint'}
    </Button>
  );
};